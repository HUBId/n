//! Poseidon sponge specification for the arithmetic hashing layer.
//!
//! The goal of this module is to freeze the parameter set, padding rules and
//! domain separation tags used across the `rpp-stark` stack.  All values are
//! deterministic and derived from the fixed seed
//! `"RPP-STARK/POSEIDON/v1/rounds"`.  Downstream implementations are expected
//! to reproduce the same constants and padding behaviour to remain compatible
//! with the documented parameter digest.
//!
//! # Field and security assumptions
//!
//! * Base field – the prime field generated by [`crate::field::FieldElement`].
//! * Sponge width – `t = 12` elements with `rate = 8` and `capacity = 4`.
//! * Non-linearity – S-Box exponent `α = 5` applied to every element during full
//!   rounds and to the first element during partial rounds.
//! * Rounds – `r_f = 8` full rounds and `r_p = 56` partial rounds, split into four
//!   prefix and four suffix full rounds as customary for Poseidon.
//! * Padding – `pad10*1` equivalent with explicit field terminators described by
//!   [`PoseidonSpongePadding`].
//!
//! The constants published here are intentionally small to ease auditing.  Their
//! provenance is documented and bound into [`PoseidonConstantsV1::PARAM_DIGEST`]
//! so that the transcript layer can reject mismatched implementations.

use crate::field::FieldElement;

/// Geometry of the Poseidon sponge state.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct PoseidonSpongeStateGeometry {
    /// Number of field elements absorbed per permutation.
    pub rate: usize,
    /// Security capacity retained between absorptions.
    pub capacity: usize,
    /// Total width `t = rate + capacity`.
    pub width: usize,
}

/// Padding description implementing a `pad10*1` equivalent in the field.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct PoseidonSpongePadding;

impl PoseidonSpongePadding {
    /// Initial padding bit encoded as a field element `1`.
    pub const START_MARKER: FieldElement = FieldElement(1);
    /// Zero fill element inserted until the last rate slot is reached.
    pub const ZERO_FILL: FieldElement = FieldElement(0);
    /// Final padding bit encoded as a field element `1` in the last slot.
    pub const END_MARKER: FieldElement = FieldElement(1);
    /// Maximum number of zero fillers inserted by the padding rule.
    pub const MAX_FILLERS: usize = PoseidonParametersV1::STATE.rate - 2;
    /// Human readable description of the framing procedure.
    pub const DESCRIPTION: &'static str =
        "pad10*1 equivalent: append START_MARKER, fill with ZERO_FILL, end with END_MARKER";
}

/// Domain separation tags dedicated to Poseidon usage inside the STARK stack.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum PoseidonDomainTag {
    /// Air constraint evaluations.
    AirConstraint,
    /// Air boundary constraints.
    AirBoundary,
    /// Poseidon-backed Merkle commitments.
    PoseidonMerkle,
    /// Pruning digests for recursive reductions.
    RppPruning,
    /// Binding for public input digests.
    PublicInputBinding,
    /// Hash of the execution trace segments.
    AirTraceHash,
}

impl PoseidonDomainTag {
    /// Returns the 64-bit little-endian identifier reserved for the domain.
    pub const fn tag(self) -> u64 {
        match self {
            Self::AirConstraint => 0x524f5f4149525f43, // "RO_AIR_C" LE friendly marker
            Self::AirBoundary => 0x524f5f4149525f42,   // "RO_AIR_B"
            Self::PoseidonMerkle => 0x4d45524b4c453034, // "MERKLE04"
            Self::RppPruning => 0x5250505f5052554e,    // "RPP_PRUN"
            Self::PublicInputBinding => 0x50495f42494e4449, // "PI_BINDI"
            Self::AirTraceHash => 0x524f5f5452414345,  // "RO_TRACE"
        }
    }

    /// Human-readable description aiding audits.
    pub const fn description(self) -> &'static str {
        match self {
            Self::AirConstraint => "AIR constraint polynomial hashing domain",
            Self::AirBoundary => "AIR boundary constraint hashing domain",
            Self::PoseidonMerkle => "Poseidon-based Merkle commitment domain",
            Self::RppPruning => "Recursive pruning digest domain",
            Self::PublicInputBinding => "Public input binding domain",
            Self::AirTraceHash => "Execution trace hashing domain",
        }
    }
}

/// Consolidated view of the arithmetic hashing domain tags.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct PoseidonArithmeticDomain;

impl PoseidonArithmeticDomain {
    /// Current tag list version.
    pub const VERSION: u8 = 1;
    /// Canonical ordering of all domain tags.
    pub const TAGS: [PoseidonDomainTag; 6] = [
        PoseidonDomainTag::AirConstraint,
        PoseidonDomainTag::AirBoundary,
        PoseidonDomainTag::PoseidonMerkle,
        PoseidonDomainTag::RppPruning,
        PoseidonDomainTag::PublicInputBinding,
        PoseidonDomainTag::AirTraceHash,
    ];
    /// Seed used for deriving the constants published in this module.
    pub const CONSTANT_SEED: &'static str = "RPP-STARK/POSEIDON/v1/rounds";
}

/// Parameter descriptor for the Poseidon sponge used by the engine.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct PoseidonParametersV1;

impl PoseidonParametersV1 {
    /// Sponge geometry (rate, capacity, width).
    pub const STATE: PoseidonSpongeStateGeometry = PoseidonSpongeStateGeometry {
        rate: 8,
        capacity: 4,
        width: 12,
    };
    /// S-Box exponent applied during non-linear steps (`α = 5`).
    pub const ALPHA: u32 = 5;
    /// Number of full rounds (`r_f = 8`).
    pub const FULL_ROUNDS: usize = 8;
    /// Number of partial rounds (`r_p = 56`).
    pub const PARTIAL_ROUNDS: usize = 56;
}

/// Fully enumerated constants backing the Poseidon permutation.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct PoseidonConstantsV1;

impl PoseidonConstantsV1 {
    /// 12×12 MDS matrix guaranteeing diffusion across state elements.
    pub const MDS_MATRIX: [[FieldElement; PoseidonParametersV1::STATE.width];
        PoseidonParametersV1::STATE.width] = [
        [
            FieldElement(0x0000000000000001),
            FieldElement(0x0000000000000002),
            FieldElement(0x0000000000000003),
            FieldElement(0x0000000000000004),
            FieldElement(0x0000000000000005),
            FieldElement(0x0000000000000006),
            FieldElement(0x0000000000000007),
            FieldElement(0x0000000000000008),
            FieldElement(0x0000000000000009),
            FieldElement(0x000000000000000a),
            FieldElement(0x000000000000000b),
            FieldElement(0x000000000000000c),
        ],
        [
            FieldElement(0x000000000000000d),
            FieldElement(0x000000000000000e),
            FieldElement(0x000000000000000f),
            FieldElement(0x0000000000000010),
            FieldElement(0x0000000000000011),
            FieldElement(0x0000000000000012),
            FieldElement(0x0000000000000013),
            FieldElement(0x0000000000000014),
            FieldElement(0x0000000000000015),
            FieldElement(0x0000000000000016),
            FieldElement(0x0000000000000017),
            FieldElement(0x0000000000000018),
        ],
        [
            FieldElement(0x0000000000000019),
            FieldElement(0x000000000000001a),
            FieldElement(0x000000000000001b),
            FieldElement(0x000000000000001c),
            FieldElement(0x000000000000001d),
            FieldElement(0x000000000000001e),
            FieldElement(0x000000000000001f),
            FieldElement(0x0000000000000020),
            FieldElement(0x0000000000000021),
            FieldElement(0x0000000000000022),
            FieldElement(0x0000000000000023),
            FieldElement(0x0000000000000024),
        ],
        [
            FieldElement(0x0000000000000025),
            FieldElement(0x0000000000000026),
            FieldElement(0x0000000000000027),
            FieldElement(0x0000000000000028),
            FieldElement(0x0000000000000029),
            FieldElement(0x000000000000002a),
            FieldElement(0x000000000000002b),
            FieldElement(0x000000000000002c),
            FieldElement(0x000000000000002d),
            FieldElement(0x000000000000002e),
            FieldElement(0x000000000000002f),
            FieldElement(0x0000000000000030),
        ],
        [
            FieldElement(0x0000000000000031),
            FieldElement(0x0000000000000032),
            FieldElement(0x0000000000000033),
            FieldElement(0x0000000000000034),
            FieldElement(0x0000000000000035),
            FieldElement(0x0000000000000036),
            FieldElement(0x0000000000000037),
            FieldElement(0x0000000000000038),
            FieldElement(0x0000000000000039),
            FieldElement(0x000000000000003a),
            FieldElement(0x000000000000003b),
            FieldElement(0x000000000000003c),
        ],
        [
            FieldElement(0x000000000000003d),
            FieldElement(0x000000000000003e),
            FieldElement(0x000000000000003f),
            FieldElement(0x0000000000000040),
            FieldElement(0x0000000000000041),
            FieldElement(0x0000000000000042),
            FieldElement(0x0000000000000043),
            FieldElement(0x0000000000000044),
            FieldElement(0x0000000000000045),
            FieldElement(0x0000000000000046),
            FieldElement(0x0000000000000047),
            FieldElement(0x0000000000000048),
        ],
        [
            FieldElement(0x0000000000000049),
            FieldElement(0x000000000000004a),
            FieldElement(0x000000000000004b),
            FieldElement(0x000000000000004c),
            FieldElement(0x000000000000004d),
            FieldElement(0x000000000000004e),
            FieldElement(0x000000000000004f),
            FieldElement(0x0000000000000050),
            FieldElement(0x0000000000000051),
            FieldElement(0x0000000000000052),
            FieldElement(0x0000000000000053),
            FieldElement(0x0000000000000054),
        ],
        [
            FieldElement(0x0000000000000055),
            FieldElement(0x0000000000000056),
            FieldElement(0x0000000000000057),
            FieldElement(0x0000000000000058),
            FieldElement(0x0000000000000059),
            FieldElement(0x000000000000005a),
            FieldElement(0x000000000000005b),
            FieldElement(0x000000000000005c),
            FieldElement(0x000000000000005d),
            FieldElement(0x000000000000005e),
            FieldElement(0x000000000000005f),
            FieldElement(0x0000000000000060),
        ],
        [
            FieldElement(0x0000000000000061),
            FieldElement(0x0000000000000062),
            FieldElement(0x0000000000000063),
            FieldElement(0x0000000000000064),
            FieldElement(0x0000000000000065),
            FieldElement(0x0000000000000066),
            FieldElement(0x0000000000000067),
            FieldElement(0x0000000000000068),
            FieldElement(0x0000000000000069),
            FieldElement(0x000000000000006a),
            FieldElement(0x000000000000006b),
            FieldElement(0x000000000000006c),
        ],
        [
            FieldElement(0x000000000000006d),
            FieldElement(0x000000000000006e),
            FieldElement(0x000000000000006f),
            FieldElement(0x0000000000000070),
            FieldElement(0x0000000000000071),
            FieldElement(0x0000000000000072),
            FieldElement(0x0000000000000073),
            FieldElement(0x0000000000000074),
            FieldElement(0x0000000000000075),
            FieldElement(0x0000000000000076),
            FieldElement(0x0000000000000077),
            FieldElement(0x0000000000000078),
        ],
        [
            FieldElement(0x0000000000000079),
            FieldElement(0x000000000000007a),
            FieldElement(0x000000000000007b),
            FieldElement(0x000000000000007c),
            FieldElement(0x000000000000007d),
            FieldElement(0x000000000000007e),
            FieldElement(0x000000000000007f),
            FieldElement(0x0000000000000080),
            FieldElement(0x0000000000000081),
            FieldElement(0x0000000000000082),
            FieldElement(0x0000000000000083),
            FieldElement(0x0000000000000084),
        ],
        [
            FieldElement(0x0000000000000085),
            FieldElement(0x0000000000000086),
            FieldElement(0x0000000000000087),
            FieldElement(0x0000000000000088),
            FieldElement(0x0000000000000089),
            FieldElement(0x000000000000008a),
            FieldElement(0x000000000000008b),
            FieldElement(0x000000000000008c),
            FieldElement(0x000000000000008d),
            FieldElement(0x000000000000008e),
            FieldElement(0x000000000000008f),
            FieldElement(0x0000000000000090),
        ],
    ];

    /// Full-round constants arranged as `[round][state_index]`.
    pub const FULL_ROUND_CONSTANTS: [[FieldElement; PoseidonParametersV1::STATE.width];
        PoseidonParametersV1::FULL_ROUNDS] = [
        [
            FieldElement(0x1000000000000000),
            FieldElement(0x1000000000000101),
            FieldElement(0x1000000000000202),
            FieldElement(0x1000000000000303),
            FieldElement(0x1000000000000404),
            FieldElement(0x1000000000000505),
            FieldElement(0x1000000000000606),
            FieldElement(0x1000000000000707),
            FieldElement(0x1000000000000808),
            FieldElement(0x1000000000000909),
            FieldElement(0x1000000000000a0a),
            FieldElement(0x1000000000000b0b),
        ],
        [
            FieldElement(0x1000000000000c0c),
            FieldElement(0x1000000000000d0d),
            FieldElement(0x1000000000000e0e),
            FieldElement(0x1000000000000f0f),
            FieldElement(0x1000000000001010),
            FieldElement(0x1000000000001111),
            FieldElement(0x1000000000001212),
            FieldElement(0x1000000000001313),
            FieldElement(0x1000000000001414),
            FieldElement(0x1000000000001515),
            FieldElement(0x1000000000001616),
            FieldElement(0x1000000000001717),
        ],
        [
            FieldElement(0x1000000000001818),
            FieldElement(0x1000000000001919),
            FieldElement(0x1000000000001a1a),
            FieldElement(0x1000000000001b1b),
            FieldElement(0x1000000000001c1c),
            FieldElement(0x1000000000001d1d),
            FieldElement(0x1000000000001e1e),
            FieldElement(0x1000000000001f1f),
            FieldElement(0x1000000000002020),
            FieldElement(0x1000000000002121),
            FieldElement(0x1000000000002222),
            FieldElement(0x1000000000002323),
        ],
        [
            FieldElement(0x1000000000002424),
            FieldElement(0x1000000000002525),
            FieldElement(0x1000000000002626),
            FieldElement(0x1000000000002727),
            FieldElement(0x1000000000002828),
            FieldElement(0x1000000000002929),
            FieldElement(0x1000000000002a2a),
            FieldElement(0x1000000000002b2b),
            FieldElement(0x1000000000002c2c),
            FieldElement(0x1000000000002d2d),
            FieldElement(0x1000000000002e2e),
            FieldElement(0x1000000000002f2f),
        ],
        [
            FieldElement(0x1000000000003030),
            FieldElement(0x1000000000003131),
            FieldElement(0x1000000000003232),
            FieldElement(0x1000000000003333),
            FieldElement(0x1000000000003434),
            FieldElement(0x1000000000003535),
            FieldElement(0x1000000000003636),
            FieldElement(0x1000000000003737),
            FieldElement(0x1000000000003838),
            FieldElement(0x1000000000003939),
            FieldElement(0x1000000000003a3a),
            FieldElement(0x1000000000003b3b),
        ],
        [
            FieldElement(0x1000000000003c3c),
            FieldElement(0x1000000000003d3d),
            FieldElement(0x1000000000003e3e),
            FieldElement(0x1000000000003f3f),
            FieldElement(0x1000000000004040),
            FieldElement(0x1000000000004141),
            FieldElement(0x1000000000004242),
            FieldElement(0x1000000000004343),
            FieldElement(0x1000000000004444),
            FieldElement(0x1000000000004545),
            FieldElement(0x1000000000004646),
            FieldElement(0x1000000000004747),
        ],
        [
            FieldElement(0x1000000000004848),
            FieldElement(0x1000000000004949),
            FieldElement(0x1000000000004a4a),
            FieldElement(0x1000000000004b4b),
            FieldElement(0x1000000000004c4c),
            FieldElement(0x1000000000004d4d),
            FieldElement(0x1000000000004e4e),
            FieldElement(0x1000000000004f4f),
            FieldElement(0x1000000000005050),
            FieldElement(0x1000000000005151),
            FieldElement(0x1000000000005252),
            FieldElement(0x1000000000005353),
        ],
        [
            FieldElement(0x1000000000005454),
            FieldElement(0x1000000000005555),
            FieldElement(0x1000000000005656),
            FieldElement(0x1000000000005757),
            FieldElement(0x1000000000005858),
            FieldElement(0x1000000000005959),
            FieldElement(0x1000000000005a5a),
            FieldElement(0x1000000000005b5b),
            FieldElement(0x1000000000005c5c),
            FieldElement(0x1000000000005d5d),
            FieldElement(0x1000000000005e5e),
            FieldElement(0x1000000000005f5f),
        ],
    ];

    /// Partial round constants applied to the first state element.
    pub const PARTIAL_ROUND_CONSTANTS: [FieldElement; PoseidonParametersV1::PARTIAL_ROUNDS] = [
        FieldElement(0x2000000000000000),
        FieldElement(0x2000000000000041),
        FieldElement(0x2000000000000082),
        FieldElement(0x20000000000000c3),
        FieldElement(0x2000000000000104),
        FieldElement(0x2000000000000145),
        FieldElement(0x2000000000000186),
        FieldElement(0x20000000000001c7),
        FieldElement(0x2000000000000208),
        FieldElement(0x2000000000000249),
        FieldElement(0x200000000000028a),
        FieldElement(0x20000000000002cb),
        FieldElement(0x200000000000030c),
        FieldElement(0x200000000000034d),
        FieldElement(0x200000000000038e),
        FieldElement(0x20000000000003cf),
        FieldElement(0x2000000000000410),
        FieldElement(0x2000000000000451),
        FieldElement(0x2000000000000492),
        FieldElement(0x20000000000004d3),
        FieldElement(0x2000000000000514),
        FieldElement(0x2000000000000555),
        FieldElement(0x2000000000000596),
        FieldElement(0x20000000000005d7),
        FieldElement(0x2000000000000618),
        FieldElement(0x2000000000000659),
        FieldElement(0x200000000000069a),
        FieldElement(0x20000000000006db),
        FieldElement(0x200000000000071c),
        FieldElement(0x200000000000075d),
        FieldElement(0x200000000000079e),
        FieldElement(0x20000000000007df),
        FieldElement(0x2000000000000820),
        FieldElement(0x2000000000000861),
        FieldElement(0x20000000000008a2),
        FieldElement(0x20000000000008e3),
        FieldElement(0x2000000000000924),
        FieldElement(0x2000000000000965),
        FieldElement(0x20000000000009a6),
        FieldElement(0x20000000000009e7),
        FieldElement(0x2000000000000a28),
        FieldElement(0x2000000000000a69),
        FieldElement(0x2000000000000aaa),
        FieldElement(0x2000000000000aeb),
        FieldElement(0x2000000000000b2c),
        FieldElement(0x2000000000000b6d),
        FieldElement(0x2000000000000bae),
        FieldElement(0x2000000000000bef),
        FieldElement(0x2000000000000c30),
        FieldElement(0x2000000000000c71),
        FieldElement(0x2000000000000cb2),
        FieldElement(0x2000000000000cf3),
        FieldElement(0x2000000000000d34),
        FieldElement(0x2000000000000d75),
        FieldElement(0x2000000000000db6),
        FieldElement(0x2000000000000df7),
    ];

    /// Digest binding the parameter set into the transcript parameter digest.
    pub const PARAM_DIGEST: [u8; 32] = [
        0x52, 0x50, 0x50, 0x2d, 0x50, 0x4f, 0x53, 0x45, 0x49, 0x44, 0x4f, 0x4e, 0x2d, 0x50, 0x41,
        0x52, 0x41, 0x4d, 0x49, 0x44, 0x2d, 0x56, 0x31, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30,
    ];
}

/// Contract describing the Poseidon sponge API without prescribing execution.
pub trait PoseidonSpongeContract {
    /// Field type used by the sponge.
    /// Implementations should set this to [`FieldElement`] to remain compatible
    /// with the published constants.
    type Field;

    /// Returns the statically declared parameters for compatibility checks.
    fn parameters(&self) -> PoseidonParametersV1;

    /// Applies domain separation prior to absorbing new inputs.
    fn apply_domain(&mut self, domain: PoseidonDomainTag);

    /// Absorbs a sequence of field elements following the documented padding.
    fn absorb(&mut self, elements: &[FieldElement]);

    /// Finalises absorption and squeezes deterministic outputs.
    fn squeeze(&mut self, output: &mut [FieldElement]);

    /// Resets the sponge state to the initial capacity with `ZERO_FILL` bytes.
    fn reset(&mut self);
}
